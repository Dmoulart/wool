

 // does not work
// my_bool :: 1 == 1

global_var :: 1234 + 1234

a :: -> { 
  // i : i32 = 1 * 1 + 1 - 123 - 312 / 123

  i :i64 = 1 

  c := i == global_var

  d : i64 = if c {
      inner := 1
      inner
    }
    else 
      i
 
  // @does not work
  /*
  d : i64 = if c 
    { 
      global_var 
    } 
    else 
    { 
      i 
    }
   */
}

/* 
add :: -> { 
  1 + 1 + 1
}
*/
/* add_poly :: first, second -> 
{
  first + second
}

add :: first, second -> f32
{
  first + second
}

main :: -> void {

  a :f32 = add(1 2)

  b := 10000

  a = a + b

  // i = add(i, b) // <- parser bug 
}
*/

/*
add :: first, second -> f32
{
  first + second
}

main :: -> void
{
  i := 10

  while i > 1.5 {
    sum := add(1, i)
    if sum >= 10 {
      i = i - 1
    }
  }

}
*/

/*
global_var  : i32 = 0 // -> Globals.put('global_var')
global_var_2: i32 = 0

b :: -> {
  local_var: i32 = 0 // -> Locals.put('local_var')
}

a :: -> {
  local_var: f32 = 1 // -> Locals.put('local_var')
}

*/


/*
// log :: from console import log

add :: first, second ->
{
  first + second
}

main :: -> void {
  sum :: add(1, 1.5)

  log(sum)
}
*/


/*
test_float_coercion :: {
  b := 1
  c := 2

  if (c == 1.5) c else b // should coerce b and c to float !
}
*/

/*
// the problematic propagation case
a := 1.5 + (2 + 3 + (4 - 5))
*/

/*
a :: 1 // <- Number

b :: 2 // <- Number

// (add is a virtual/abstract (generic) function as long as it contains a non terminal type)
add :: first, second ->
{
  first + second
}

// (main is always an "concrete" (non-generic) function)
main :: -> {

  // <- Number
  sum := add(a, b)

  // <- Float
  sum + 1.5

}

// (an actual function types should always be resolved to terminal types)
*/
