
log :: from console import log

sum :: a i32, b i32 -> i32 a + b

main :: -> {
  a := 1
  b := a + 1
  c := b + 1

  log(a)

  /* 
  b : i32 = 1

  result := sum(a a) + sum(a a) 

  log(result)

  d := if a  1 + 1 else 2 + 123

  log(d)


  c := 2000 // <- segfault, get_tid circular references

  sum := if add(c 3) == c
    c
  else
    a + 101

  log(sum)
  */
}



/*
log :: from console import log

// add :: a i32, b i32 -> i32 a + b

main :: a i32, b i32, c i32 -> {
  a := 1

  c : i32 = 2000

  sum := if add(2 1) == 3
    c
  else
    a + 101

  log(sum)
}
*/

















/*
add :: a i32 , b i32 -> i32 a + b

log :: from console import log

main :: -> {
  a := 1
  b := if add(1 a) == 2 15 else 1
  c := true
  d := if c 1 + 1 else 2 + 123

  log(add(a d) + add(1 b))
}
*/

/*
// @todo: comptime calculation not working
// my_bool :: 1 == 1

//@todo:infer not working for 123 infering
// d := if c 1 + 1 else 2 + 123

// @todo: segfault! crazy right ?
// log(add(a b) + add(b a))

add :: a i64, b i64 -> i64 a + b

main :: -> {
  a := true
  b := true

  i : i64 = if true or true and a or b
     add(2 1)
    else
     0

  /*a : i64  = 10
  b : i64  = 20
  i := a > b */
}

*/


/*
global_var :: 1234 + 1234

a :: -> {
  // e : i32 = 1 * 1 + 1 - 123 - 312 / 123

  i : i64 = 1 or 0

  c := i == global_var

  // f := d + i

  d := if c 1 + 1 else 2 + 123

  g : i64 = if c
    {
      azerty := global_var
      azerty
    }
      else
    d

 /*
  g : i64 = if c
      global_var
    else
      i
 */
}

*/






/*
add :: -> {
  1 + 1 + 1
}
*/
/* add_poly :: first, second ->
{
  first + second
}

add :: first, second -> f32
{
  first + second
}

main :: -> void {

  a :f32 = add(1 2)

  b := 10000

  a = a + b

  // i = add(i, b) // <- parser bug
}
*/

/*
add :: first, second -> f32
{
  first + second
}

main :: -> void
{
  i := 10

  while i > 1.5 {
    sum := add(1, i)
    if sum >= 10 {
      i = i - 1
    }
  }

}
*/

/*
global_var  : i32 = 0 // -> Globals.put('global_var')
global_var_2: i32 = 0

b :: -> {
  local_var: i32 = 0 // -> Locals.put('local_var')
}

a :: -> {
  local_var: f32 = 1 // -> Locals.put('local_var')
}

*/


/*
// log :: from console import log

add :: first, second ->
{
  first + second
}

main :: -> void {
  sum :: add(1, 1.5)

  log(sum)
}
*/


/*
test_float_coercion :: {
  b := 1
  c := 2

  if (c == 1.5) c else b // should coerce b and c to float !
}
*/

/*
// the problematic propagation case
a := 1.5 + (2 + 3 + (4 - 5))
*/

/*
a :: 1 // <- Number

b :: 2 // <- Number

// (add is a virtual/abstract (generic) function as long as it contains a non terminal type)
add :: first, second ->
{
  first + second
}

// (main is always an "concrete" (non-generic) function)
main :: -> {

  // <- Number
  sum := add(a, b)

  // <- Float
  sum + 1.5

}

// (an actual function types should always be resolved to terminal types)
*/
